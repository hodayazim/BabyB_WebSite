{"ast":null,"code":"import { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, NgZone, Input, Output, ViewChild, ChangeDetectorRef, ContentChildren, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { MessageService, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { RippleModule } from 'primeng/ripple';\nimport { trigger, state, style, transition, animate, query, animateChild } from '@angular/animations';\n\nclass ToastItem {\n  constructor(zone) {\n    this.zone = zone;\n    this.onClose = new EventEmitter();\n  }\n\n  ngAfterViewInit() {\n    this.initTimeout();\n  }\n\n  initTimeout() {\n    if (!this.message.sticky) {\n      this.zone.runOutsideAngular(() => {\n        this.timeout = setTimeout(() => {\n          this.onClose.emit({\n            index: this.index,\n            message: this.message\n          });\n        }, this.message.life || 3000);\n      });\n    }\n  }\n\n  clearTimeout() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n  }\n\n  onMouseEnter() {\n    this.clearTimeout();\n  }\n\n  onMouseLeave() {\n    this.initTimeout();\n  }\n\n  onCloseIconClick(event) {\n    this.clearTimeout();\n    this.onClose.emit({\n      index: this.index,\n      message: this.message\n    });\n    event.preventDefault();\n  }\n\n  ngOnDestroy() {\n    this.clearTimeout();\n  }\n\n}\n\nToastItem.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'p-toastItem',\n    template: `\n        <div #container [attr.id]=\"message.id\" class=\"p-toast-message\" [ngClass]=\"'p-toast-message-' + message.severity\" [@messageState]=\"{value: 'visible', params: {showTransformParams: showTransformOptions, hideTransformParams: hideTransformOptions, showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\"\n                (mouseenter)=\"onMouseEnter()\" (mouseleave)=\"onMouseLeave()\">\n            <div class=\"p-toast-message-content\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n                <ng-container *ngIf=\"!template\">\n                    <span [class]=\"'p-message-icon pi' + (message.icon ? ' ' + message.icon : '')\" [ngClass]=\"{'pi-info-circle': message.severity == 'info', 'pi-exclamation-triangle': message.severity == 'warn',\n                        'pi-times-circle': message.severity == 'error', 'pi-check' :message.severity == 'success'}\"></span>\n                    <div class=\"p-toast-message-text\">\n                        <div class=\"p-toast-summary\">{{message.summary}}</div>\n                        <div class=\"p-toast-detail\">{{message.detail}}</div>\n                    </div>\n                </ng-container>\n                <button type=\"button\" class=\"p-toast-icon-close p-link\" (click)=\"onCloseIconClick($event)\" (keydown.enter)=\"onCloseIconClick($event)\" *ngIf=\"message.closable !== false\" pRipple>\n                    <span class=\"p-toast-icon-close-icon pi pi-times\"></span>\n                </button>\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: message}\"></ng-container>\n            </div>\n        </div>\n    `,\n    animations: [trigger('messageState', [state('visible', style({\n      transform: 'translateY(0)',\n      opacity: 1\n    })), transition('void => *', [style({\n      transform: '{{showTransformParams}}',\n      opacity: 0\n    }), animate('{{showTransitionParams}}')]), transition('* => void', [animate('{{hideTransitionParams}}', style({\n      height: 0,\n      opacity: 0,\n      transform: '{{hideTransformParams}}'\n    }))])])],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\n\nToastItem.ctorParameters = () => [{\n  type: NgZone\n}];\n\nToastItem.propDecorators = {\n  message: [{\n    type: Input\n  }],\n  index: [{\n    type: Input\n  }],\n  template: [{\n    type: Input\n  }],\n  showTransformOptions: [{\n    type: Input\n  }],\n  hideTransformOptions: [{\n    type: Input\n  }],\n  showTransitionOptions: [{\n    type: Input\n  }],\n  hideTransitionOptions: [{\n    type: Input\n  }],\n  onClose: [{\n    type: Output\n  }],\n  containerViewChild: [{\n    type: ViewChild,\n    args: ['container']\n  }]\n};\n\nclass Toast {\n  constructor(messageService, cd) {\n    this.messageService = messageService;\n    this.cd = cd;\n    this.autoZIndex = true;\n    this.baseZIndex = 0;\n    this.position = 'top-right';\n    this.preventOpenDuplicates = false;\n    this.preventDuplicates = false;\n    this.showTransformOptions = 'translateY(100%)';\n    this.hideTransformOptions = 'translateY(-100%)';\n    this.showTransitionOptions = '300ms ease-out';\n    this.hideTransitionOptions = '250ms ease-in';\n    this.onClose = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this.messageSubscription = this.messageService.messageObserver.subscribe(messages => {\n      if (messages) {\n        if (messages instanceof Array) {\n          const filteredMessages = messages.filter(m => this.canAdd(m));\n          this.add(filteredMessages);\n        } else if (this.canAdd(messages)) {\n          this.add([messages]);\n        }\n      }\n    });\n    this.clearSubscription = this.messageService.clearObserver.subscribe(key => {\n      if (key) {\n        if (this.key === key) {\n          this.messages = null;\n        }\n      } else {\n        this.messages = null;\n      }\n\n      this.cd.markForCheck();\n    });\n  }\n\n  add(messages) {\n    this.messages = this.messages ? [...this.messages, ...messages] : [...messages];\n\n    if (this.preventDuplicates) {\n      this.messagesArchieve = this.messagesArchieve ? [...this.messagesArchieve, ...messages] : [...messages];\n    }\n\n    this.cd.markForCheck();\n  }\n\n  canAdd(message) {\n    let allow = this.key === message.key;\n\n    if (allow && this.preventOpenDuplicates) {\n      allow = !this.containsMessage(this.messages, message);\n    }\n\n    if (allow && this.preventDuplicates) {\n      allow = !this.containsMessage(this.messagesArchieve, message);\n    }\n\n    return allow;\n  }\n\n  containsMessage(collection, message) {\n    if (!collection) {\n      return false;\n    }\n\n    return collection.find(m => {\n      return m.summary === message.summary && m.detail == message.detail && m.severity === message.severity;\n    }) != null;\n  }\n\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'message':\n          this.template = item.template;\n          break;\n\n        default:\n          this.template = item.template;\n          break;\n      }\n    });\n  }\n\n  onMessageClose(event) {\n    this.messages.splice(event.index, 1);\n    this.onClose.emit({\n      message: event.message\n    });\n    this.cd.detectChanges();\n  }\n\n  onAnimationStart(event) {\n    if (event.fromState === 'void' && this.autoZIndex) {\n      this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + ++DomHandler.zindex);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.messageSubscription) {\n      this.messageSubscription.unsubscribe();\n    }\n\n    if (this.clearSubscription) {\n      this.clearSubscription.unsubscribe();\n    }\n  }\n\n}\n\nToast.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'p-toast',\n    template: `\n        <div #container [ngClass]=\"'p-toast p-component p-toast-' + position\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <p-toastItem *ngFor=\"let msg of messages; let i=index\" [message]=\"msg\" [index]=\"i\" (onClose)=\"onMessageClose($event)\"\n                    [template]=\"template\" @toastAnimation (@toastAnimation.start)=\"onAnimationStart($event)\" \n                    [showTransformOptions]=\"showTransformOptions\" [hideTransformOptions]=\"hideTransformOptions\" \n                    [showTransitionOptions]=\"showTransitionOptions\" [hideTransitionOptions]=\"hideTransitionOptions\"></p-toastItem>\n        </div>\n    `,\n    animations: [trigger('toastAnimation', [transition(':enter, :leave', [query('@*', animateChild())])])],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [\".p-toast{position:fixed;width:25rem}.p-toast-message{overflow:hidden}.p-toast-message-content{align-items:flex-start;display:flex}.p-toast-message-text{flex:1 1 auto}.p-toast-top-right{right:20px;top:20px}.p-toast-top-left{left:20px;top:20px}.p-toast-bottom-left{bottom:20px;left:20px}.p-toast-bottom-right{bottom:20px;right:20px}.p-toast-top-center{left:50%;margin-left:-10em;top:20px}.p-toast-bottom-center{bottom:20px;left:50%;margin-left:-10em}.p-toast-center{left:50%;min-width:20vw;top:50%;transform:translate(-50%,-50%)}.p-toast-icon-close{align-items:center;display:flex;justify-content:center;overflow:hidden;position:relative}.p-toast-icon-close.p-link{cursor:pointer}\"]\n  }]\n}];\n\nToast.ctorParameters = () => [{\n  type: MessageService\n}, {\n  type: ChangeDetectorRef\n}];\n\nToast.propDecorators = {\n  key: [{\n    type: Input\n  }],\n  autoZIndex: [{\n    type: Input\n  }],\n  baseZIndex: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  position: [{\n    type: Input\n  }],\n  preventOpenDuplicates: [{\n    type: Input\n  }],\n  preventDuplicates: [{\n    type: Input\n  }],\n  showTransformOptions: [{\n    type: Input\n  }],\n  hideTransformOptions: [{\n    type: Input\n  }],\n  showTransitionOptions: [{\n    type: Input\n  }],\n  hideTransitionOptions: [{\n    type: Input\n  }],\n  onClose: [{\n    type: Output\n  }],\n  containerViewChild: [{\n    type: ViewChild,\n    args: ['container']\n  }],\n  templates: [{\n    type: ContentChildren,\n    args: [PrimeTemplate]\n  }]\n};\n\nclass ToastModule {}\n\nToastModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, RippleModule],\n    exports: [Toast, SharedModule],\n    declarations: [Toast, ToastItem]\n  }]\n}];\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Toast, ToastItem, ToastModule };","map":{"version":3,"sources":["../../src/app/components/toast/toast.ts","../../src/app/components/toast/primeng-toast.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,OnInit,AfterViewInit,AfterContentInit,OnDestroy,ElementRef,ViewChild,EventEmitter,ContentChildren,QueryList,TemplateRef,ChangeDetectionStrategy, NgZone, ChangeDetectorRef, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Message} from 'primeng/api';\nimport {DomHandler} from 'primeng/dom';\nimport {PrimeTemplate,SharedModule} from 'primeng/api';\nimport {MessageService} from 'primeng/api';\nimport {RippleModule} from 'primeng/ripple';\nimport {Subscription} from 'rxjs';\nimport {trigger,state,style,transition,animate,query,animateChild,AnimationEvent} from '@angular/animations';\n\n@Component({\n    selector: 'p-toastItem',\n    template: `\n        <div #container [attr.id]=\"message.id\" class=\"p-toast-message\" [ngClass]=\"'p-toast-message-' + message.severity\" [@messageState]=\"{value: 'visible', params: {showTransformParams: showTransformOptions, hideTransformParams: hideTransformOptions, showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\"\n                (mouseenter)=\"onMouseEnter()\" (mouseleave)=\"onMouseLeave()\">\n            <div class=\"p-toast-message-content\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n                <ng-container *ngIf=\"!template\">\n                    <span [class]=\"'p-message-icon pi' + (message.icon ? ' ' + message.icon : '')\" [ngClass]=\"{'pi-info-circle': message.severity == 'info', 'pi-exclamation-triangle': message.severity == 'warn',\n                        'pi-times-circle': message.severity == 'error', 'pi-check' :message.severity == 'success'}\"></span>\n                    <div class=\"p-toast-message-text\">\n                        <div class=\"p-toast-summary\">{{message.summary}}</div>\n                        <div class=\"p-toast-detail\">{{message.detail}}</div>\n                    </div>\n                </ng-container>\n                <button type=\"button\" class=\"p-toast-icon-close p-link\" (click)=\"onCloseIconClick($event)\" (keydown.enter)=\"onCloseIconClick($event)\" *ngIf=\"message.closable !== false\" pRipple>\n                    <span class=\"p-toast-icon-close-icon pi pi-times\"></span>\n                </button>\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: message}\"></ng-container>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('messageState', [\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => *', [\n                style({transform: '{{showTransformParams}}', opacity: 0}),\n                animate('{{showTransitionParams}}')\n            ]),\n            transition('* => void', [\n                animate(('{{hideTransitionParams}}'), style({\n                    height: 0,\n                    opacity: 0,\n                    transform: '{{hideTransformParams}}'\n                }))\n            ])\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToastItem implements AfterViewInit, OnDestroy {\n\n    @Input() message: Message;\n\n    @Input() index: number;\n\n    @Input() template: TemplateRef<any>;\n\n    @Input() showTransformOptions: string;\n\n    @Input() hideTransformOptions: string;\n\n    @Input() showTransitionOptions: string;\n\n    @Input() hideTransitionOptions: string;\n\n    @Output() onClose: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    timeout: any;\n\n    constructor(private zone: NgZone) {}\n    \n    ngAfterViewInit() {\n        this.initTimeout();\n    }\n\n    initTimeout() {\n        if (!this.message.sticky) {\n            this.zone.runOutsideAngular(() => {\n                this.timeout = setTimeout(() => {\n                    this.onClose.emit({\n                        index: this.index,\n                        message: this.message\n                    });\n                }, this.message.life || 3000);\n            });\n        }\n    }\n\n    clearTimeout() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n    }\n    \n    onMouseEnter() {\n        this.clearTimeout();\n    }\n\n    onMouseLeave() {\n        this.initTimeout();\n    }\n \n    onCloseIconClick(event) {\n        this.clearTimeout();\n        \n        this.onClose.emit({\n            index: this.index,\n            message: this.message\n        });\n\n        event.preventDefault();\n    }\n\n    ngOnDestroy() {\n        this.clearTimeout();\n    }\n}\n\n@Component({\n    selector: 'p-toast',\n    template: `\n        <div #container [ngClass]=\"'p-toast p-component p-toast-' + position\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <p-toastItem *ngFor=\"let msg of messages; let i=index\" [message]=\"msg\" [index]=\"i\" (onClose)=\"onMessageClose($event)\"\n                    [template]=\"template\" @toastAnimation (@toastAnimation.start)=\"onAnimationStart($event)\" \n                    [showTransformOptions]=\"showTransformOptions\" [hideTransformOptions]=\"hideTransformOptions\" \n                    [showTransitionOptions]=\"showTransitionOptions\" [hideTransitionOptions]=\"hideTransitionOptions\"></p-toastItem>\n        </div>\n    `,\n    animations: [\n        trigger('toastAnimation', [\n            transition(':enter, :leave', [\n                query('@*', animateChild())\n            ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./toast.css']\n})\nexport class Toast implements OnInit,AfterContentInit,OnDestroy {\n\n    @Input() key: string;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() style: any;\n        \n    @Input() styleClass: string;\n\n    @Input() position: string = 'top-right';\n\n    @Input() preventOpenDuplicates: boolean = false;\n\n    @Input() preventDuplicates: boolean = false;\n    \n    @Input() showTransformOptions: string = 'translateY(100%)';\n\n    @Input() hideTransformOptions: string = 'translateY(-100%)';\n\n    @Input() showTransitionOptions: string = '300ms ease-out';\n\n    @Input() hideTransitionOptions: string = '250ms ease-in';\n\n    @Output() onClose: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    messageSubscription: Subscription;\n\n    clearSubscription: Subscription;\n\n    messages: Message[];\n\n    messagesArchieve: Message[];\n\n    template: TemplateRef<any>;\n    \n    constructor(public messageService: MessageService, private cd: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.messageSubscription = this.messageService.messageObserver.subscribe(messages => {\n            if (messages) {\n                if (messages instanceof Array) {\n                    const filteredMessages = messages.filter(m => this.canAdd(m));\n                    this.add(filteredMessages);\n                }\n                else if (this.canAdd(messages)) {\n                    this.add([messages]);\n                }\n            }\n        });\n\n        this.clearSubscription = this.messageService.clearObserver.subscribe(key => {\n            if (key) {\n                if (this.key === key) {\n                    this.messages = null;\n                }\n            }\n            else {\n                this.messages = null;\n            }\n\n            this.cd.markForCheck();\n        });       \n    }\n\n    add(messages: Message[]): void {\n        this.messages = this.messages ? [...this.messages, ...messages] : [...messages];\n\n        if (this.preventDuplicates) {\n            this.messagesArchieve = this.messagesArchieve ? [...this.messagesArchieve, ...messages] : [...messages];\n        }\n\n        this.cd.markForCheck();\n    }\n\n    canAdd(message: Message): boolean {\n        let allow = this.key === message.key;\n\n        if (allow && this.preventOpenDuplicates) {\n            allow = !this.containsMessage(this.messages, message);\n        }\n\n        if (allow && this.preventDuplicates) {\n            allow = !this.containsMessage(this.messagesArchieve, message);\n        }\n\n        return allow;\n    }\n\n    containsMessage(collection: Message[], message: Message): boolean {\n        if (!collection) {\n            return false;\n        }\n\n        return collection.find(m => {\n           return ((m.summary === message.summary) && (m.detail == message.detail) && (m.severity === message.severity));\n        }) != null;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'message':\n                    this.template = item.template;\n                break;\n\n                default:\n                    this.template = item.template;\n                break;\n            }\n        });\n    }\n\n    onMessageClose(event) {\n        this.messages.splice(event.index, 1);\n\n        this.onClose.emit({\n            message: event.message\n        });\n\n        this.cd.detectChanges();\n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        if (event.fromState === 'void' && this.autoZIndex) {\n            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n\n    ngOnDestroy() {        \n        if (this.messageSubscription) {\n            this.messageSubscription.unsubscribe();\n        }\n        \n        if (this.clearSubscription) {\n            this.clearSubscription.unsubscribe();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RippleModule],\n    exports: [Toast,SharedModule],\n    declarations: [Toast,ToastItem]\n})\nexport class ToastModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}